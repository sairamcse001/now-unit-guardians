name: Detect and Run Unit Tests with Coverage

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  check-spec-files:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    permissions:
      pull-requests: write
      contents: read

    steps:
      - name: Checkout PR branch code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Detect .spec.js Files in PR
        id: detect_files
        run: |
          BASE="${{ github.event.pull_request.base.ref }}"
          git fetch origin "$BASE"
          FILES=$(git diff --name-only origin/"$BASE"...HEAD | grep '\.spec\.js$' || true)
          echo "found_files=$FILES" >> "$GITHUB_OUTPUT"

      - name: Run Jest with Coverage
        id: jest
        run: |
          echo "üß™ Running tests with coverage..."
          npm run coverage || true
          echo "jest_exit_code=$?" >> $GITHUB_ENV

      - name: Upload HTML Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: coverage/lcov-report
          retention-days: 7

      - name: Post Jest Coverage Summary as PR Comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'coverage/coverage-summary.json';
            if (!fs.existsSync(path)) {
              core.warning('‚ö†Ô∏è coverage-summary.json not found');
            } else {
              const summary = JSON.parse(fs.readFileSync(path, 'utf8')).total;
              const format = (obj) => `- üß™ **Statements**: ${obj.statements.pct}% | **Branches**: ${obj.branches.pct}% | **Functions**: ${obj.functions.pct}% | **Lines**: ${obj.lines.pct}%`;

              const body = `### ‚úÖ Jest Code Coverage Report\n${format(summary)}\n\nüìÅ [Download HTML Coverage Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) ‚Üí Artifacts section`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body
              });
            }

      - name: Send Metrics to ServiceNow
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'coverage/coverage-summary.json';

            if (!fs.existsSync(path)) {
              core.warning('‚ö†Ô∏è No coverage-summary.json found. Skipping API call.');
              return;
            }

            const summary = JSON.parse(fs.readFileSync(path, 'utf8'));
            const pr = context.payload.pull_request;
            const repo = context.repo.repo;
            const owner = context.repo.owner;
            const branch = context.payload.pull_request.head.ref;

            const filesChanged = `\`${{ steps.detect_files.outputs.found_files }}\``
              .replace(/[`"]/g, '')
              .split(/\s+/)
              .filter(f => f.endsWith('.spec.js'));

            if (filesChanged.length === 0) {
              core.warning('No .spec.js files found, skipping API call.');
              return;
            }

            const specFilePath = `https://raw.githubusercontent.com/${owner}/${repo}/refs/heads/${branch}/${filesChanged[0]}`;
            const jsFilePath = specFilePath.replace('/__tests__/', '/src/').replace('.spec.js', '.js');

            const payload = {
              jsfilePath: jsFilePath,
              specJsfilePath: specFilePath,
              prNumber: pr.number.toString(),
              prlink: pr.html_url,
              Author: pr.user.login,
              MergeStatus: pr.draft ? 'Draft' : 'Ready',
              prName: pr.title,
              BranchName: branch,
              coverage: {
                files: {
                  allfiles: {
                    lines: summary.total.lines.pct,
                    branch: summary.total.branches.pct
                  },
                  "mathUtil.js": summary["mathUtil.js"] || {}
                }
              }
            };

            console.log('üì§ Sending payload to ServiceNow:');
            console.log(JSON.stringify(payload, null, 2));

            const res = await fetch('https://hackai.service-now.com/api/snc/nowunitmetricsapi', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(payload)
            });

            const resText = await res.text();
            console.log('üõ∞Ô∏è ServiceNow response:', res.status, resText);

      - name: Fail if Jest Tests Failed
        run: |
          echo "‚úÖ Workflow completed. Checking Jest result..."
          exit $jest_exit_code
