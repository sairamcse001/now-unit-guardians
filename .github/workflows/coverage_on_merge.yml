name: Full Jest Coverage and Test Summary

on:
  push:
    branches:
      - main

jobs:
  coverage-report:
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Checkout main
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          echo "ðŸ“¦ Installing dependencies..."
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Run Jest and Build Final JSON Inline
        run: |
          echo "ðŸ§ª Running Jest with coverage..."
          OUTPUT=$(npx jest --coverage 2>&1 | tee /dev/stderr)
          echo "$OUTPUT" > temp/jest-output.txt
          echo "ðŸ“¦ Extracting test summary..."
          TEST_SUITES=$(echo "$OUTPUT" | grep "^Test Suites:" | sed 's/^Test Suites:[[:space:]]*//')
          TESTS=$(echo "$OUTPUT" | grep "^Tests:" | sed 's/^Tests:[[:space:]]*//')
          SNAPSHOTS=$(echo "$OUTPUT" | grep "^Snapshots:" | sed 's/^Snapshots:[[:space:]]*//')
          TIME=$(echo "$OUTPUT" | grep "^Time:" | sed 's/^Time:[[:space:]]*//')
          BUILD_ERROR=false
          echo "$TEST_SUITES" | grep -q "failed" && BUILD_ERROR=true
          echo "$TESTS" | grep -q "failed" && BUILD_ERROR=true
          echo "ðŸ“¦ Parsing coverage table..."

          COVERAGE_JSON_ARRAY="["
          FIRST=1
          in_table=false
          while IFS= read -r line; do
            if [[ "$line" == *"File"* && "$line" == *"% Stmts"* ]]; then
              in_table=true
              continue
            fi
            [[ "$in_table" == false || "$line" =~ ^-+$ ]] && continue
            [[ "$line" == "" ]] && continue
            # Skip separators and header
            if [[ "$line" =~ ^[-|]+$ ]]; then
              continue
            fi
            # Parse line
            FIELDS=($(echo "$line" | awk -F '|' '{for(i=1;i<=NF;i++) gsub(/^[ \t]+|[ \t]+$/, "", $i); print $1,$2,$3,$4,$5,$6}'))
            FILE="${FIELDS[0]}"
            STMT="${FIELDS[1]}"
            BRANCH="${FIELDS[2]}"
            FUNC="${FIELDS[3]}"
            LINE_COV="${FIELDS[4]}"
            UNCOVERED="${FIELDS[5]}"
            ENTRY=$(jq -n \
              --arg file "$FILE" \
              --arg stm "$STMT" \
              --arg br "$BRANCH" \
              --arg fn "$FUNC" \
              --arg ln "$LINE_COV" \
              --arg unc "$UNCOVERED" \
              '{file: $file, statements: $stm, branches: $br, functions: $fn, lines: $ln, uncovered_lines: $unc}')
            if [ $FIRST -eq 1 ]; then
              FIRST=0
            else
              COVERAGE_JSON_ARRAY="${COVERAGE_JSON_ARRAY},"
            fi
            COVERAGE_JSON_ARRAY="${COVERAGE_JSON_ARRAY}${ENTRY}"
          done <<< "$(echo "$OUTPUT" | grep -E '^[^|]+ \| +[0-9]+ +\|')"
          COVERAGE_JSON_ARRAY="${COVERAGE_JSON_ARRAY}]"
          echo "$COVERAGE_JSON_ARRAY" > coverage-table-summary.json

      - name: Extract Jest Run Summary (Node.js)
        run: |
          node <<'EOF'
          const fs = require('fs');
          const text = fs.readFileSync('./temp/jest-output.txt', 'utf-8');
          const lines = text.split('\n');

          const summary = {
            passedFiles: [],
            suites: '',
            tests: '',
            snapshots: '',
            time: ''
          };

          for (const line of lines) {
            const trimmed = line.trim();
            if (trimmed.startsWith('PASS')) {
              summary.passedFiles.push(trimmed);
            }
            if (trimmed.startsWith('Test Suites:')) {
              summary.suites = trimmed.replace(/^Test Suites:\s*/, '');
            }
            if (trimmed.startsWith('Tests:')) {
              summary.tests = trimmed.replace(/^Tests:\s*/, '');
            }
            if (trimmed.startsWith('Snapshots:')) {
              summary.snapshots = trimmed.replace(/^Snapshots:\s*/, '');
            }
            if (trimmed.startsWith('Time:')) {
              summary.time = trimmed.replace(/^Time:\s*/, '');
            }
          }

          fs.writeFileSync('jest-run-summary.json', JSON.stringify(summary, null, 2));
          console.log('âœ… Jest Run Summary:');
          console.log(summary);
          EOF

      - name: Upload JSON Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jest-summary-json
          path: |
            jest-run-summary.json
            coverage-table-summary.json
