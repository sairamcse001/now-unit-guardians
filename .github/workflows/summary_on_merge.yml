name: Full Jest Coverage

on:
  push:
    branches:
      - main

jobs:
  coverage-report:
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Checkout main
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          echo "ðŸ“¦ Installing dependencies..."
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Run Jest and Parse Output to JSON
        run: |
          echo "ðŸ§ª Running Jest with coverage..."
          OUTPUT=$(npx jest --coverage 2>&1 | tee /dev/stderr)

          echo "ðŸ“¦ Extracting summary..."
          TEST_SUITES=$(echo "$OUTPUT" | grep "^Test Suites:" | sed 's/^Test Suites:[[:space:]]*//')
          TESTS=$(echo "$OUTPUT" | grep "^Tests:" | sed 's/^Tests:[[:space:]]*//')
          SNAPSHOTS=$(echo "$OUTPUT" | grep "^Snapshots:" | sed 's/^Snapshots:[[:space:]]*//')
          TIME=$(echo "$OUTPUT" | grep "^Time:" | sed 's/^Time:[[:space:]]*//')

          echo "ðŸ§ª Extracting test results..."
          TEST_RESULTS_JSON="["
          IS_FIRST=1
          CURRENT_FILE=""
          CURRENT_ERROR=""
          IN_FAILURE=0

          while IFS= read -r line; do
            if [[ "$line" =~ ^PASS ]]; then
              FILE=$(echo "$line" | awk '{print $2}')
              ENTRY=$(jq -n --arg file "$FILE" --arg status "PASS" '{file: $file, status: $status}')
              if [[ $IS_FIRST -eq 1 ]]; then
                IS_FIRST=0
              else
                TEST_RESULTS_JSON="${TEST_RESULTS_JSON},"
              fi
              TEST_RESULTS_JSON="${TEST_RESULTS_JSON}${ENTRY}"
              IN_FAILURE=0
            elif [[ "$line" =~ ^FAIL ]]; then
              if [[ "$CURRENT_FILE" != "" && "$CURRENT_ERROR" != "" ]]; then
                # Flush previous error block
                ENTRY=$(jq -Rs --arg file "$CURRENT_FILE" --arg status "FAIL" \
                        --arg error "$CURRENT_ERROR" \
                        '{file: $file, status: $status, error: $error}')
                if [[ $IS_FIRST -eq 1 ]]; then
                  IS_FIRST=0
                else
                  TEST_RESULTS_JSON="${TEST_RESULTS_JSON},"
                fi
                TEST_RESULTS_JSON="${TEST_RESULTS_JSON}${ENTRY}"
              fi
              CURRENT_FILE=$(echo "$line" | awk '{print $2}')
              CURRENT_ERROR=""
              IN_FAILURE=1
            elif [[ $IN_FAILURE -eq 1 ]]; then
              # Preserve indentation and newline formatting
              CURRENT_ERROR="${CURRENT_ERROR}${line}\n"
            fi
          done <<< "$OUTPUT"

          # Flush final failure block if any
          if [[ $IN_FAILURE -eq 1 && "$CURRENT_FILE" != "" && "$CURRENT_ERROR" != "" ]]; then
            ENTRY=$(jq -Rs --arg file "$CURRENT_FILE" --arg status "FAIL" \
                    --arg error "$CURRENT_ERROR" \
                    '{file: $file, status: $status, error: $error}')
            if [[ $IS_FIRST -eq 1 ]]; then
              IS_FIRST=0
            else
              TEST_RESULTS_JSON="${TEST_RESULTS_JSON},"
            fi
            TEST_RESULTS_JSON="${TEST_RESULTS_JSON}${ENTRY}"
          fi

          TEST_RESULTS_JSON="${TEST_RESULTS_JSON}]"

          echo "ðŸ“Š Final Structured JSON:"
          jq -n \
            --arg test_suites "$TEST_SUITES" \
            --arg tests "$TESTS" \
            --arg snapshots "$SNAPSHOTS" \
            --arg time "$TIME" \
            --argjson test_results "$TEST_RESULTS_JSON" \
            '{
              test_summary: {
                test_suites: $test_suites,
                tests: $tests,
                snapshots: $snapshots,
                time: $time
              },
              test_results: $test_results
            }'
