name: PR ServiceNow Notify

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - main

jobs:
  notify-servicenow:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          fetch-depth: 0

      - name: Install dependencies
        run: npm ci

      - name: Run Jest and Collect Coverage
        run: |
          npx jest --coverage --silent || true
          mkdir -p ./temp
          cp coverage/coverage-summary.json ./temp/

      - name: Extract Jest Coverage Summary
        id: extract
        run: |
          SUMMARY=$(cat ./temp/coverage-summary.json)
          echo "$SUMMARY" | jq . > /dev/null || { echo "‚ùå Invalid JSON"; exit 1; }

          LINES=$(echo "$SUMMARY" | jq -r '.total.lines.pct')
          BRANCHES=$(echo "$SUMMARY" | jq -r '.total.branches.pct')
          FUNCTIONS=$(echo "$SUMMARY" | jq -r '.total.functions.pct')
          STATEMENTS=$(echo "$SUMMARY" | jq -r '.total.statements.pct')

          echo "LINES=$LINES" >> $GITHUB_ENV
          echo "BRANCHES=$BRANCHES" >> $GITHUB_ENV
          echo "FUNCTIONS=$FUNCTIONS" >> $GITHUB_ENV
          echo "STATEMENTS=$STATEMENTS" >> $GITHUB_ENV

          echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          echo "PR_LINK=${{ github.event.pull_request.html_url }}" >> $GITHUB_ENV
          echo "AUTHOR=${{ github.event.pull_request.user.login }}" >> $GITHUB_ENV
          echo "PR_TITLE=${{ github.event.pull_request.title }}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${{ github.event.pull_request.base.ref }}" >> $GITHUB_ENV
          echo "MERGE_STATUS=$([ "${{ github.event.pull_request.draft }}" == "true" ] && echo "Draft" || echo "Ready")" >> $GITHUB_ENV
          echo "JS_URL=https://raw.githubusercontent.com/sairamp076/Now-Unit-Guardians/refs/heads/main/src/mathUtil.js" >> $GITHUB_ENV
          echo "SPEC_URL=https://raw.githubusercontent.com/sairamp076/Now-Unit-Guardians/refs/heads/main/__tests__/mathUtil.spec.js" >> $GITHUB_ENV
          echo "PR_PREVIEW_LINK=https://preview--code-guardian-ai-vision-27.lovable.app/pr-ai-metrics/${{ github.event.pull_request.number }}" >> $GITHUB_ENV

      - name: Construct Hardcoded Payload JSON
        run: |
          mkdir -p temp
          cat <<EOF > temp/hardcoded-payload.json
{
  "jsfilePath": "${JS_URL}",
  "specJsfilePath": "${SPEC_URL}",
  "prNumber": "${PR_NUMBER}",
  "prlink": "${PR_LINK}",
  "Author": "${AUTHOR}",
  "MergeStatus": "${MERGE_STATUS}",
  "prName": "${PR_TITLE}",
  "BranchName": "${BRANCH_NAME}",
  "coverage": {
    "files": {
      "allfiles": {
        "lines": ${LINES},
        "branches": ${BRANCHES}
      },
      "mathUtil.js": {
        "lines": ${LINES},
        "branches": ${BRANCHES},
        "functions": ${FUNCTIONS},
        "statements": ${STATEMENTS},
        "uncovered_lines": []
      }
    }
  }
}
EOF

          cat temp/hardcoded-payload.json

      - name: Send to ServiceNow
        run: |
          echo "üì° Sending PR data to ServiceNow..."

          RESPONSE=$(curl -s -w "\n%{http_code}" --location 'https://hackai.service-now.com/api/snc/nowunitmetricsapi' \
            --header 'Content-Type: application/json' \
            --data @temp/hardcoded-payload.json)

          BODY=$(echo "$RESPONSE" | sed '$d')
          STATUS=$(echo "$RESPONSE" | tail -n1)

          echo "Status Code: $STATUS"
          echo "Response Body:"
          echo "$BODY"

          if [[ "$STATUS" -ne 200 && "$STATUS" -ne 201 ]]; then
            echo "‚ùå Failed to notify ServiceNow"
            exit 1
          fi

      - name: Comment on PR using GitHub API
        env:
          GH_TOKEN: ${{ secrets.GH_COMMENT_PAT }}
        run: |
          COMMENT="‚úÖ **PR Metrics Preview**
üîó [Click here to view full metrics](${PR_PREVIEW_LINK})

**üìä Jest Coverage Summary**
| Metric     | Percentage |
|------------|------------|
| üß™ Lines    | ${LINES}% |
| üåø Branches | ${BRANCHES}% |
| üîß Functions | ${FUNCTIONS}% |
| üì¶ Statements | ${STATEMENTS}% |"

          curl -s -X POST "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments" \
            -H "Authorization: token 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" \
            -H "Content-Type: application/json" \
            -d "$(jq -n --arg body "$COMMENT" '{body: $body}')"
