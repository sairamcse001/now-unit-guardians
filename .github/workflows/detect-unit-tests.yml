name: Full Jest Coverage

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

jobs:
  coverage-report:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: read

    steps:
      - name: Checkout PR Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          echo "üì¶ Installing dependencies..."
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Run Jest with coverage and save output
        run: |
          echo "üß™ Running Jest with coverage..."
          mkdir -p temp
          npx jest --coverage || true
          cp coverage/coverage-summary.json temp/coverage-summary.json || echo "{}" > temp/coverage-summary.json
          npx jest --coverage | tee ./temp/jest-output.txt

      - name: Parse Jest Coverage Table Summary
        run: |
          node <<'EOF'
          const fs = require('fs');
          const text = fs.readFileSync('./temp/jest-output.txt', 'utf-8');
          const lines = text.split('\n');

          const start = lines.findIndex(line => line.includes('File')) + 1;
          const end = lines.findIndex((line, i) => i > start && line.trim().startsWith('-------------'));

          const rawBase = `https://raw.githubusercontent.com/sairamp076/Now-Unit-Guardians/refs/heads/main`;
          const data = [];

          for (let i = start; i < end; i++) {
            const line = lines[i].trim();
            if (!line || line.startsWith('---')) continue;

            const parts = line.split('|').map(part => part.trim());
            if (parts.length < 6) continue;

            const file = parts[0];
            const baseFileName = file.replace(/^.*[\\/]/, '');
            const testFileName = baseFileName.replace(/\.js$/, '.spec.js');
            data.push({
              file,
              source_url: `${rawBase}/src/${file}`,
              spec_url: `${rawBase}/__tests__/${testFileName}`,
              coverage: {
                statements: parts[1],
                branches: parts[2],
                functions: parts[3],
                lines: parts[4],
                uncovered_lines: parts[5] || ''
              }
            });
          }

          fs.writeFileSync('./temp/coverage-table-summary.json', JSON.stringify(data, null, 2));
          EOF

      - name: Call ServiceNow NowUnitMetrics API
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üì§ Preparing payload for ServiceNow..."

          PR_DATA=$(gh pr view ${{ github.event.pull_request.number }} --json number,title,author,headRefName,state,url -q \
            '{prNumber: .number, prlink: .url, Author: .author.login, BranchName: .headRefName, MergeStatus: .state, prName: .title}')

          JS_FILE="mathUtil.js"
          RAW_BASE="https://raw.githubusercontent.com/sairamp076/Now-Unit-Guardians/refs/heads/main"
          JS_URL="$RAW_BASE/src/$JS_FILE"
          SPEC_URL="$RAW_BASE/__tests__/${JS_FILE%.js}.spec.js"

          COVERAGE=$(jq -n \
            --arg file "$JS_FILE" \
            --slurpfile coverage ./temp/coverage-table-summary.json \
            '{
              files: {
                allfiles: {
                  lines: (
                    ($coverage[0][] | .coverage.lines | sub("%"; "") | tonumber)
                  ),
                  branch: (
                    ($coverage[0][] | .coverage.branches | sub("%"; "") | tonumber)
                  )
                },
                ($file): (
                  $coverage[0][] | select(.file == $file) | {
                    lines: (.coverage.lines | sub("%"; "") | tonumber),
                    branch: (.coverage.branches | sub("%"; "") | tonumber),
                    functions: (.coverage.functions | sub("%"; "") | tonumber),
                    statements: (.coverage.statements | sub("%"; "") | tonumber),
                    uncovered_lines: (.coverage.uncovered_lines | split(",") // [])
                  }
                )
              }
            }')

          FINAL=$(jq -n \
            --arg jsfilePath "$JS_URL" \
            --arg specJsfilePath "$SPEC_URL" \
            --argjson coverage "$COVERAGE" \
            --argjson pr "$PR_DATA" \
            '{
              jsfilePath: $jsfilePath,
              specJsfilePath: $specJsfilePath,
              prNumber: ($pr.prNumber | tostring),
              prlink: $pr.prlink,
              Author: $pr.Author,
              MergeStatus: $pr.MergeStatus,
              prName: $pr.prName,
              BranchName: $pr.BranchName,
              coverage: $coverage
            }')

          echo "$FINAL" > ./temp/final-nowunitmetrics-payload.json
          echo "Payload:"
          cat ./temp/final-nowunitmetrics-payload.json

          echo "üì¨ Sending to ServiceNow..."
          RESPONSE=$(curl -s -w "\n%{http_code}" --location 'https://hackai.service-now.com/api/snc/nowunitmetricsapi' \
            --header 'Content-Type: application/json' \
            --data @./temp/final-nowunitmetrics-payload.json)

          BODY=$(echo "$RESPONSE" | sed '$d')
          STATUS=$(echo "$RESPONSE" | tail -n1)

          echo "Status Code: $STATUS"
          echo "Response Body:"
          echo "$BODY"

          if [[ "$STATUS" -ne 200 && "$STATUS" -ne 201 ]]; then
            echo "‚ùå Failed to POST data to ServiceNow"
            exit 1
          fi
