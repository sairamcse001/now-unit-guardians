name: Detect and Run Unit Tests with Coverage

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  check-spec-files:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    permissions:
      pull-requests: write
      contents: read

    steps:
      - name: Checkout PR branch code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Detect .spec.js Files in PR
        id: detect_files
        run: |
          BASE="${{ github.event.pull_request.base.ref }}"
          git fetch origin "$BASE"

          FILES=$(git diff --name-only origin/"$BASE"...HEAD | grep '\.spec\.js$' || true)
          echo "found_files=$FILES" >> "$GITHUB_OUTPUT"

      - name: Run Jest with Coverage
        id: jest
        run: |
          echo "üß™ Running tests with coverage..."
          npm run coverage || true
          echo "jest_exit_code=$?" >> $GITHUB_ENV

      - name: Upload HTML Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: coverage/lcov-report
          retention-days: 7

      - name: Post Jest Coverage Summary as PR Comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'coverage/coverage-summary.json';
            if (!fs.existsSync(path)) {
              core.warning('‚ö†Ô∏è coverage-summary.json not found');
            } else {
              const summary = JSON.parse(fs.readFileSync(path, 'utf8')).total;
              const format = (obj) => `- üß™ **Statements**: ${obj.statements.pct}% | **Branches**: ${obj.branches.pct}% | **Functions**: ${obj.functions.pct}% | **Lines**: ${obj.lines.pct}%`;

              const body = `### ‚úÖ Jest Code Coverage Report\n${format(summary)}\n\nüìÅ [Download HTML Coverage Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) ‚Üí Artifacts section`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body
              });
            }

      - name: Send Metrics to ServiceNow
        run: |
          echo "üì° Sending metrics to ServiceNow..."

          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_LINK="${{ github.event.pull_request.html_url }}"
          BRANCH_NAME="${{ github.head_ref }}"
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"

          if [ "${{ github.event.pull_request.draft }}" = "false" ]; then
            MERGE_STATE="Ready"
          else
            MERGE_STATE="Draft"
          fi

          REPO="${{ github.repository }}"
          OWNER=$(echo "$REPO" | cut -d'/' -f1)
          REPO_NAME=$(echo "$REPO" | cut -d'/' -f2)

          FILES="${{ steps.detect_files.outputs.found_files }}"
          JS_FILE=""
          SPEC_FILE=""

          for FILE in $FILES; do
            RAW_URL="https://raw.githubusercontent.com/$OWNER/$REPO_NAME/refs/heads/$BRANCH_NAME/$FILE"
            SPEC_FILE="$RAW_URL"

            BASE_JS_FILE=$(basename "$FILE")
            JS_NAME="${BASE_JS_FILE/.spec.js/.js}"
            JS_FILE="https://raw.githubusercontent.com/$OWNER/$REPO_NAME/refs/heads/$BRANCH_NAME/src/$JS_NAME"
          done

          SUMMARY=$(cat coverage/coverage-summary.json)
          LINES_PCT=$(echo "$SUMMARY" | jq '.total.lines.pct')
          BRANCH_PCT=$(echo "$SUMMARY" | jq '.total.branches.pct')
          FILE_COVERAGE=$(echo "$SUMMARY" | jq '.["mathUtil.js"]')

          PAYLOAD=$(echo '{}' | jq --arg jsfile "$JS_FILE" \
                                   --arg specfile "$SPEC_FILE" \
                                   --arg prnum "$PR_NUMBER" \
                                   --arg prlink "$PR_LINK" \
                                   --arg author "$PR_AUTHOR" \
                                   --arg merge "$MERGE_STATE" \
                                   --arg prname "$PR_TITLE" \
                                   --arg branch "$BRANCH_NAME" \
                                   --argjson lines "$LINES_PCT" \
                                   --argjson branches "$BRANCH_PCT" \
                                   --argjson filecov "$FILE_COVERAGE" \
            '.jsfilePath = $jsfile |
             .specJsfilePath = $specfile |
             .prNumber = $prnum |
             .prlink = $prlink |
             .Author = $author |
             .MergeStatus = $merge |
             .prName = $prname |
             .BranchName = $branch |
             .coverage.files.allfiles.lines = $lines |
             .coverage.files.allfiles.branch = $branches |
             .coverage.files["mathUtil.js"] = $filecov')

          echo "$PAYLOAD"

          curl -X POST "https://hackai.service-now.com/api/snc/nowunitmetricsapi" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD"

      - name: Fail if Jest Tests Failed
        run: |
          echo "Checking Jest result..."
          exit $jest_exit_code
