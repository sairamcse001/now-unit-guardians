name: PR Jest Coverage Report

on:
  pull_request:
    types: [opened]
    branches:
      - main

jobs:
  pr-jest-coverage:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: read

    steps:
      - name: Checkout PR Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Dependencies
        run: |
          echo "üì¶ Installing dependencies..."
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Run Jest with Coverage
        run: |
          echo "üß™ Running Jest..."
          mkdir -p temp
          npx jest --coverage | tee ./temp/jest-output.txt

      - name: Parse Jest Coverage & Compose Payload
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          PR_NUM: ${{ github.event.pull_request.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
          PR_BRANCH: ${{ github.event.pull_request.base.ref }}
          PR_MERGE_STATE: ${{ github.event.pull_request.draft }}
        run: |
          echo "üìä Extracting Coverage Summary..."

          # Extract one file coverage (e.g., mathUtil.js)
          FILE_NAME="mathUtil.js"
          SPEC_NAME="mathUtil.spec.js"
          JS_FILE_PATH="src/$FILE_NAME"
          SPEC_FILE_PATH="__tests__/$SPEC_NAME"

          RAW_BASE="https://raw.githubusercontent.com/sairamp076/Now-Unit-Guardians/refs/heads/main"

          # Parse Jest coverage-summary JSON
          COVERAGE_JSON=$(cat coverage/coverage-summary.json | jq -r '{
            files: {
              allfiles: {
                lines: .total.lines.pct,
                branch: .total.branches.pct
              },
              "mathUtil.js": {
                lines: .["src/mathUtil.js"].lines.pct,
                branch: .["src/mathUtil.js"].branches.pct,
                functions: .["src/mathUtil.js"].functions.pct,
                statements: .["src/mathUtil.js"].statements.pct,
                uncovered_lines: []
              }
            }
          }')

          FINAL_PAYLOAD=$(jq -n \
            --arg jsfilePath "$RAW_BASE/$JS_FILE_PATH" \
            --arg specJsfilePath "$RAW_BASE/$SPEC_FILE_PATH" \
            --arg prNumber "$PR_NUM" \
            --arg prlink "$PR_URL" \
            --arg Author "$PR_AUTHOR" \
            --arg prName "$PR_TITLE" \
            --arg BranchName "$PR_BRANCH" \
            --arg MergeStatus "$([ "$PR_MERGE_STATE" == "true" ] && echo "Draft" || echo "Ready")" \
            --argjson coverage "$COVERAGE_JSON" \
            '{
              jsfilePath: $jsfilePath,
              specJsfilePath: $specJsfilePath,
              prNumber: $prNumber,
              prlink: $prlink,
              Author: $Author,
              MergeStatus: $MergeStatus,
              prName: $prName,
              BranchName: $BranchName,
              coverage: $coverage
            }'
          )

          echo "$FINAL_PAYLOAD" > ./temp/pr-payload.json
          echo "üì¨ Payload Ready:"
          cat ./temp/pr-payload.json

      - name: Send PR Metrics to ServiceNow
        run: |
          echo "üöÄ Sending PR metrics to ServiceNow..."

          RESPONSE=$(curl -s -w "\n%{http_code}" --location 'https://hackai.service-now.com/api/snc/nowunitmetricsapi' \
            --header 'Content-Type: application/json' \
            --data @./temp/pr-payload.json)

          BODY=$(echo "$RESPONSE" | sed '$d')
          STATUS=$(echo "$RESPONSE" | tail -n1)

          echo "Status Code: $STATUS"
          echo "Response:"
          echo "$BODY"

          if [[ "$STATUS" -ne 200 && "$STATUS" -ne 201 ]]; then
            echo "‚ùå Failed to POST PR metrics to ServiceNow"
            exit 1
          fi
