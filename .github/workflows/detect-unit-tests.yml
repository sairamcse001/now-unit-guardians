name: PR ServiceNow Notify

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - main

jobs:
  notify-servicenow:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          fetch-depth: 0

      - name: Install dependencies
        run: |
          npm ci

      - name: Run Jest and collect coverage
        run: |
          npx jest --coverage --silent || true
          mkdir -p ./temp
          cp coverage/coverage-summary.json ./temp/

      - name: Extract Jest coverage summary
        id: extract
        run: |
          echo "üìä Extracting Jest coverage summary..."

          SUMMARY=$(cat ./temp/coverage-summary.json)
          echo "$SUMMARY" | jq . > /dev/null || { echo "‚ùå Invalid JSON"; exit 1; }

          LINES=$(echo "$SUMMARY" | jq -r '.total.lines.pct')
          BRANCHES=$(echo "$SUMMARY" | jq -r '.total.branches.pct')
          FUNCTIONS=$(echo "$SUMMARY" | jq -r '.total.functions.pct')
          STATEMENTS=$(echo "$SUMMARY" | jq -r '.total.statements.pct')

          echo "LINES=$LINES" >> $GITHUB_ENV
          echo "BRANCHES=$BRANCHES" >> $GITHUB_ENV
          echo "FUNCTIONS=$FUNCTIONS" >> $GITHUB_ENV
          echo "STATEMENTS=$STATEMENTS" >> $GITHUB_ENV
          echo "PR_PREVIEW_LINK=https://preview--code-guardian-ai-vision-27.lovable.app/pr-ai-metrics/${{ github.event.pull_request.number }}" >> $GITHUB_ENV

      - name: Send to ServiceNow
        run: |
          echo "üì° Sending PR data to ServiceNow..."

          JS_FILE="https://raw.githubusercontent.com/sairamp076/Now-Unit-Guardians/refs/heads/main/src/mathUtil.js"
          SPEC_FILE="https://raw.githubusercontent.com/sairamp076/Now-Unit-Guardians/refs/heads/main/__tests__/mathUtil.spec.js"

          FINAL_PAYLOAD=$(jq -n \
            --arg jsfilePath "$JS_FILE" \
            --arg specJsfilePath "$SPEC_FILE" \
            --arg prNumber "${{ github.event.pull_request.number }}" \
            --arg prlink "${{ github.event.pull_request.html_url }}" \
            --arg Author "${{ github.event.pull_request.user.login }}" \
            --arg prName "${{ github.event.pull_request.title }}" \
            --arg BranchName "${{ github.event.pull_request.base.ref }}" \
            --arg MergeStatus "$([ "${{ github.event.pull_request.draft }}" == "true" ] && echo "Draft" || echo "Ready")" \
            --argjson coverage "$(cat ./temp/coverage-summary.json)" \
            '{
              jsfilePath: $jsfilePath,
              specJsfilePath: $specJsfilePath,
              prNumber: $prNumber,
              prlink: $prlink,
              Author: $Author,
              MergeStatus: $MergeStatus,
              prName: $prName,
              BranchName: $BranchName,
              coverage: $coverage
            }')

          echo "$FINAL_PAYLOAD" > ./temp/temp-pr-payload.json

          RESPONSE=$(curl -s -w "\n%{http_code}" --location 'https://hackai.service-now.com/api/snc/nowunitmetricsapi' \
            --header 'Content-Type: application/json' \
            --data @./temp/temp-pr-payload.json)

          BODY=$(echo "$RESPONSE" | sed '$d')
          STATUS=$(echo "$RESPONSE" | tail -n1)

          echo "Status Code: $STATUS"
          echo "Response Body:"
          echo "$BODY"

          if [[ "$STATUS" -ne 200 && "$STATUS" -ne 201 ]]; then
            echo "‚ùå Failed to notify ServiceNow"
            exit 1
          fi

      - name: Comment on PR using GitHub API
        env:
          GH_TOKEN: ${{ secrets.GH_COMMENT_PAT }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
        run: |
          COMMENT="‚úÖ **PR Metrics Preview**
üîó [Click here to view full metrics](${PR_PREVIEW_LINK})

**üìä Jest Coverage Summary**
| Metric     | Percentage |
|------------|------------|
| üß™ Lines    | ${LINES}% |
| üåø Branches | ${BRANCHES}% |
| üîß Functions | ${FUNCTIONS}% |
| üì¶ Statements | ${STATEMENTS}% |"

          curl -s -X POST "https://api.github.com/repos/${OWNER}/${REPO}/issues/${PR_NUMBER}/comments" \
            -H "Authorization: token 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" \
            -H "Content-Type: application/json" \
            -d "$(jq -n --arg body "$COMMENT" '{body: $body}')"
